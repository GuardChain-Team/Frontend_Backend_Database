import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/config";
import { prisma } from "@/lib/database/prisma";
import { format } from "date-fns";

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const body = await request.json();
    const {
      type, // 'dashboard', 'alert', 'transaction', 'investigation', 'report', 'analytics'
      entityId,
      format: outputFormat = "html", // 'html', 'pdf-ready'
      options = {},
      includeCharts = true,
      includeMetadata = true,
      customTitle,
      logoUrl,
    } = body;

    if (!type) {
      return NextResponse.json(
        { error: "Print type required" },
        { status: 400 }
      );
    }

    let printData: any = {};
    let htmlContent = "";

    // Common header template
    const headerTemplate = `
      <div class="print-header" style="margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #e5e7eb;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <div>
            ${
              logoUrl
                ? `<img src="${logoUrl}" alt="Logo" style="height: 50px; margin-bottom: 10px;">`
                : ""
            }
            <h1 style="margin: 0; color: #1f2937; font-size: 24px; font-weight: bold;">
              ${customTitle || "GuardChain Fraud Detection System"}
            </h1>
            <p style="margin: 5px 0 0 0; color: #6b7280; font-size: 14px;">
              Generated on ${format(new Date(), "MMMM dd, yyyy HH:mm:ss")}
            </p>
          </div>
          <div style="text-align: right;">
            <p style="margin: 0; color: #374151; font-size: 14px; font-weight: 600;">
              Generated by: ${session.user.firstName} ${session.user.lastName}
            </p>
            <p style="margin: 5px 0 0 0; color: #6b7280; font-size: 12px;">
              ${session.user.email}
            </p>
          </div>
        </div>
      </div>
    `;

    const printStyles = `
      <style>
        @media print {
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }
          .no-print { display: none !important; }
          .page-break { page-break-before: always; }
          table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
          th, td { border: 1px solid #d1d5db; padding: 8px; text-align: left; font-size: 12px; }
          th { background-color: #f9fafb; font-weight: 600; }
          .stat-card { border: 1px solid #e5e7eb; padding: 15px; margin: 10px 0; border-radius: 6px; }
          .stat-value { font-size: 24px; font-weight: bold; color: #1f2937; }
          .stat-label { font-size: 14px; color: #6b7280; margin-top: 5px; }
          .alert-high { border-left: 4px solid #ef4444; }
          .alert-medium { border-left: 4px solid #f59e0b; }
          .alert-low { border-left: 4px solid #10b981; }
          .section-title { font-size: 18px; font-weight: bold; color: #1f2937; margin: 30px 0 15px 0; padding-bottom: 10px; border-bottom: 1px solid #e5e7eb; }
        }
        @page { margin: 1in; }
      </style>
    `;

    switch (type) {
      case "dashboard":
        // Fetch dashboard overview data
        const [
          alertsCount,
          transactionsCount,
          investigationsCount,
          usersCount,
        ] = await Promise.all([
          prisma.alert.count(),
          prisma.transaction.count(),
          prisma.investigation.count(),
          prisma.user.count(),
        ]);

        const recentAlerts = await prisma.alert.findMany({
          take: 10,
          orderBy: { createdAt: "desc" },
          include: {
            assignee: {
              select: { firstName: true, lastName: true },
            },
          },
        });

        const alertsByPriority = await prisma.alert.groupBy({
          by: ["priority"],
          _count: { id: true },
        });

        const alertsByStatus = await prisma.alert.groupBy({
          by: ["status"],
          _count: { id: true },
        });

        htmlContent = `
          <!DOCTYPE html>
          <html>
          <head>
            <title>Dashboard Overview Report</title>
            <meta charset="utf-8">
            ${printStyles}
          </head>
          <body>
            ${headerTemplate}
            
            <div class="section-title">System Overview</div>
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin-bottom: 30px;">
              <div class="stat-card">
                <div class="stat-value">${alertsCount}</div>
                <div class="stat-label">Total Alerts</div>
              </div>
              <div class="stat-card">
                <div class="stat-value">${transactionsCount}</div>
                <div class="stat-label">Total Transactions</div>
              </div>
              <div class="stat-card">
                <div class="stat-value">${investigationsCount}</div>
                <div class="stat-label">Active Investigations</div>
              </div>
              <div class="stat-card">
                <div class="stat-value">${usersCount}</div>
                <div class="stat-label">System Users</div>
              </div>
            </div>

            <div class="section-title">Alerts by Priority</div>
            <table>
              <thead>
                <tr><th>Priority</th><th>Count</th><th>Percentage</th></tr>
              </thead>
              <tbody>
                ${alertsByPriority
                  .map((item) => {
                    const percentage = (
                      (item._count.id / alertsCount) *
                      100
                    ).toFixed(1);
                    return `<tr class="alert-${item.priority.toLowerCase()}">
                    <td>${item.priority}</td>
                    <td>${item._count.id}</td>
                    <td>${percentage}%</td>
                  </tr>`;
                  })
                  .join("")}
              </tbody>
            </table>

            <div class="section-title">Alerts by Status</div>
            <table>
              <thead>
                <tr><th>Status</th><th>Count</th><th>Percentage</th></tr>
              </thead>
              <tbody>
                ${alertsByStatus
                  .map((item) => {
                    const percentage = (
                      (item._count.id / alertsCount) *
                      100
                    ).toFixed(1);
                    return `<tr>
                    <td>${item.status}</td>
                    <td>${item._count.id}</td>
                    <td>${percentage}%</td>
                  </tr>`;
                  })
                  .join("")}
              </tbody>
            </table>

            <div class="page-break"></div>
            <div class="section-title">Recent Alerts</div>
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Type</th>
                  <th>Priority</th>
                  <th>Status</th>
                  <th>Assignee</th>
                  <th>Created</th>
                </tr>
              </thead>
              <tbody>
                ${recentAlerts
                  .map(
                    (alert) => `
                  <tr class="alert-${alert.priority.toLowerCase()}">
                    <td>${alert.id.substring(0, 8)}...</td>
                    <td>${alert.type}</td>
                    <td>${alert.priority}</td>
                    <td>${alert.status}</td>
                    <td>${
                      alert.assignee
                        ? `${alert.assignee.firstName} ${alert.assignee.lastName}`
                        : "Unassigned"
                    }</td>
                    <td>${format(
                      new Date(alert.createdAt),
                      "MMM dd, yyyy HH:mm"
                    )}</td>
                  </tr>
                `
                  )
                  .join("")}
              </tbody>
            </table>
          </body>
          </html>
        `;
        break;

      case "alert":
        if (!entityId) {
          return NextResponse.json(
            { error: "Alert ID required" },
            { status: 400 }
          );
        }

        const alert = await prisma.alert.findUnique({
          where: { id: entityId },
          include: {
            assignee: {
              select: { firstName: true, lastName: true, email: true },
            },
            transaction: {
              select: {
                id: true,
                amount: true,
                fromAccount: true,
                toAccount: true,
                timestamp: true,
              },
            },
          },
        });

        if (!alert) {
          return NextResponse.json(
            { error: "Alert not found" },
            { status: 404 }
          );
        }

        htmlContent = `
          <!DOCTYPE html>
          <html>
          <head>
            <title>Alert Report - ${alert.id}</title>
            <meta charset="utf-8">
            ${printStyles}
          </head>
          <body>
            ${headerTemplate}
            
            <div class="section-title">Alert Details</div>
            <div class="stat-card alert-${alert.priority.toLowerCase()}">
              <h2 style="margin-top: 0;">Alert ID: ${alert.id}</h2>
              <p><strong>Type:</strong> ${alert.type}</p>
              <p><strong>Priority:</strong> ${alert.priority}</p>
              <p><strong>Status:</strong> ${alert.status}</p>
              <p><strong>Risk Score:</strong> ${alert.riskScore}</p>
              <p><strong>Created:</strong> ${format(
                new Date(alert.createdAt),
                "MMMM dd, yyyy HH:mm:ss"
              )}</p>
              <p><strong>Assignee:</strong> ${
                alert.assignee
                  ? `${alert.assignee.firstName} ${alert.assignee.lastName} (${alert.assignee.email})`
                  : "Unassigned"
              }</p>
              ${
                alert.resolvedAt
                  ? `<p><strong>Resolved:</strong> ${format(
                      new Date(alert.resolvedAt),
                      "MMMM dd, yyyy HH:mm:ss"
                    )}</p>`
                  : ""
              }
            </div>

            <div class="section-title">Description</div>
            <div style="background: #f9fafb; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
              ${alert.description || "No description available"}
            </div>

            ${
              alert.transaction
                ? `
              <div class="section-title">Related Transaction</div>
              <table>
                <tr><th>Transaction ID</th><td>${alert.transaction.id}</td></tr>
                <tr><th>Amount</th><td>$${alert.transaction.amount.toLocaleString()}</td></tr>
                <tr><th>From Account</th><td>${
                  alert.transaction.fromAccount
                }</td></tr>
                <tr><th>To Account</th><td>${
                  alert.transaction.toAccount
                }</td></tr>
                <tr><th>Timestamp</th><td>${format(
                  new Date(alert.transaction.timestamp),
                  "MMMM dd, yyyy HH:mm:ss"
                )}</td></tr>
              </table>
            `
                : ""
            }

            ${
              alert.metadata
                ? `
              <div class="section-title">Additional Information</div>
              <div style="background: #f9fafb; padding: 15px; border-radius: 6px;">
                <pre style="white-space: pre-wrap; font-family: monospace; margin: 0;">${JSON.stringify(
                  alert.metadata,
                  null,
                  2
                )}</pre>
              </div>
            `
                : ""
            }
          </body>
          </html>
        `;
        break;

      case "analytics":
        // Fetch analytics data for printing
        const analytics = await prisma.$queryRaw`
          SELECT 
            DATE(created_at) as date,
            COUNT(*) as alert_count,
            AVG(risk_score) as avg_risk_score
          FROM Alert 
          WHERE created_at >= DATE('now', '-30 days')
          GROUP BY DATE(created_at)
          ORDER BY date DESC
        `;

        htmlContent = `
          <!DOCTYPE html>
          <html>
          <head>
            <title>Analytics Report</title>
            <meta charset="utf-8">
            ${printStyles}
          </head>
          <body>
            ${headerTemplate}
            
            <div class="section-title">30-Day Analytics Summary</div>
            <table>
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Alert Count</th>
                  <th>Average Risk Score</th>
                </tr>
              </thead>
              <tbody>
                ${(analytics as any[])
                  .map(
                    (row) => `
                  <tr>
                    <td>${format(new Date(row.date), "MMM dd, yyyy")}</td>
                    <td>${row.alert_count}</td>
                    <td>${Number(row.avg_risk_score).toFixed(2)}</td>
                  </tr>
                `
                  )
                  .join("")}
              </tbody>
            </table>
            
            ${
              includeCharts
                ? `
              <div class="section-title">Chart Placeholder</div>
              <div style="border: 2px dashed #d1d5db; padding: 40px; text-align: center; color: #6b7280; margin: 20px 0;">
                <p>Charts would appear here in the actual PDF export</p>
                <p>This HTML version shows data tables instead</p>
              </div>
            `
                : ""
            }
          </body>
          </html>
        `;
        break;

      default:
        return NextResponse.json(
          { error: "Invalid print type" },
          { status: 400 }
        );
    }

    // Log the print action
    await prisma.auditLog.create({
      data: {
        action: "PRINT_GENERATED",
        entityType: type.toUpperCase(),
        entityId: entityId || "SYSTEM",
        userId: session.user.id,
        details: JSON.stringify({
          printType: type,
          format: outputFormat,
          includeCharts,
          includeMetadata,
          generatedBy: session.user.email,
        }),
      },
    });

    if (outputFormat === "html") {
      return new NextResponse(htmlContent, {
        headers: {
          "Content-Type": "text/html",
          "Content-Disposition": `inline; filename="${type}_report_${format(
            new Date(),
            "yyyy-MM-dd_HH-mm"
          )}.html"`,
        },
      });
    }

    // For PDF-ready format, return structured data that can be processed by a PDF library on the frontend
    return NextResponse.json({
      success: true,
      htmlContent,
      metadata: {
        title: `${type.charAt(0).toUpperCase() + type.slice(1)} Report`,
        generatedAt: new Date().toISOString(),
        generatedBy: session.user.email,
        type,
        entityId,
        options,
      },
    });
  } catch (error) {
    console.error("Print generation error:", error);
    return NextResponse.json(
      {
        error: "Failed to generate print document",
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: "Universal Print/PDF Generation API",
    supportedTypes: [
      "dashboard",
      "alert",
      "transaction",
      "investigation",
      "report",
      "analytics",
    ],
    supportedFormats: ["html", "pdf-ready"],
    options: {
      includeCharts: "boolean - Include chart placeholders",
      includeMetadata: "boolean - Include metadata section",
      customTitle: "string - Custom report title",
      logoUrl: "string - Custom logo URL",
    },
    usage: {
      dashboard: "Print system overview and statistics",
      alert: "Print specific alert details (requires entityId)",
      transaction: "Print transaction details (requires entityId)",
      investigation: "Print investigation report (requires entityId)",
      analytics: "Print analytics and trends data",
      report: "Print custom reports (requires entityId)",
    },
  });
}
